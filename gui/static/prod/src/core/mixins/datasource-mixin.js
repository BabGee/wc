import{serviceCallMixin}from"./servicecall-mixin.js";import{DataSource}from"../parsers/commands/data-source.js";import{COMMAND_DATA_SOURCE}from"../parsers/response.js";import{Logger}from"../logger.js";export const dataSourceMixin=BaseClass=>class extends serviceCallMixin(BaseClass){constructor(){super();this.loader=void 0;this.loading=!0;this.empty=!1;this.page=1;this.limit=50;this.totalElements=0;this.totalPages=0;this.q="";this.data=[];this.rows=[];this.cols=[];this.groups=[];this.columns=[]}static get properties(){return{data:{type:Array},rows:{type:Array},cols:{type:Array},groups:{type:Array},columns:{type:Array},page:{type:Number},limit:{type:Number},totalElements:{type:Number},totalPages:{type:Number},q:{type:String},loading:Boolean,empty:Boolean}}dataResponseType(){return Symbol.for("LIST")}refresh(){this.loadData().then(()=>{})}mergeParams(obj1){for(var attrname in obj1){this.params[attrname]=obj1[attrname]}this.loadData().then(()=>{})}updateParams(key,value){let reload=!0;if(!(key in this.params)&&value===void 0){reload=!1}else if(key in this.params&&value===this.params[key]){reload=!1}else{this.params[key]=value}if(reload){this.loadData().then(()=>{})}}deleteParamKeys(keys,refresh){let paramsChanged=!1;for(let i=0;i<keys.length;i++){const key=keys[i];if(key in this.params){paramsChanged=!0;delete this.params[key]}}if(refresh&&paramsChanged){this.loadData().then(()=>{})}}dscDataName(){throw new DOMException("using \"dataSourceMixin\" must override \"dscDataName\"",this)}parseResponseIntoProperties(dataSource){const self=this;let dsp;if(dataSource instanceof DataSource){dsp=dataSource}else{dsp=new DataSource(dataSource,this.parserConfig())}self.cols=dsp.cols;self.columns=dsp.columns;self.rows=dsp.rows;self.groups=dsp.groups;self.data=dsp.data;self.totalElements=dsp.totalElements;self.totalPages=Math.ceil(dsp.totalElements/self.limit);return dsp}serviceCallParams(){this.params.data_name=this.dscDataName();this.params.limit=this.limit;this.params.page=this.page;return this.params}parserConfig(){return{responseType:this.dataResponseType()}}async loadData(){this.loading=!0;Logger.i.debug("load data :"+this.dscDataName());return new Promise((resolve,reject)=>{this.callService("DATA SOURCE").then(res=>{const dataSourceCommand=res.serviceCommands[COMMAND_DATA_SOURCE],dsc=this.parseResponseIntoProperties(dataSourceCommand);this.loading=!1;this.onLoadData(dsc);resolve(dsc)},function(rejected){reject(rejected)}).catch(function(exception){Logger.i.error(exception)})})}onLoadData(dsc){if(dsc.rows&&!dsc.rows.length&&dsc.groups&&!dsc.groups.length&&dsc.data&&!dsc.data.length){this.empty=!0}}};