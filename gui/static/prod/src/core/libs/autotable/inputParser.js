import{Row,Cell,Column,Table}from"./models.js";import{getTheme,defaultConfig,defaultStyles}from"./config.js";import{parseHtml}from"./htmlParser.js";import{assign}from"./polyfills.js";import{getStringWidth,marginOrPadding}from"./common.js";import state,{getGlobalOptions,getDocumentOptions}from"./state.js";import validateInput from"./inputValidator.js";export function parseInput(args){const tableOptions=parseUserArguments(args),globalOptions=getGlobalOptions(),documentOptions=getDocumentOptions(),allOptions=[globalOptions,documentOptions,tableOptions];validateInput(allOptions);const table=new Table;state().table=table;table.id=tableOptions.tableId;const doc=state().doc;table.userStyles={textColor:doc.getTextColor?doc.getTextColor():0,fontSize:doc.internal.getFontSize(),fontStyle:doc.internal.getFont().fontStyle,font:doc.internal.getFont().fontName};for(const styleProp of Object.keys(table.styles)){const styles=allOptions.map(opts=>opts[styleProp]||{});table.styles[styleProp]=assign({},...styles)}for(const opts of allOptions){for(const hookName of Object.keys(table.cellHooks)){if(opts&&"function"===typeof opts[hookName]){table.cellHooks[hookName].push(opts[hookName])}}}table.settings=assign({},defaultConfig(),...allOptions);table.settings.margin=marginOrPadding(table.settings.margin,defaultConfig().margin);if("auto"===table.settings.theme){table.settings.theme=table.settings.useCss?"plain":"striped"}if(!1===table.settings.startY){delete table.settings.startY}const previous=state().doc.previousAutoTable,isSamePageAsPrevious=previous&&previous.startPageNumber+previous.pageNumber-1===state().pageNumber();if(null==table.settings.startY&&isSamePageAsPrevious){table.settings.startY=previous.finalY+20/state().scaleFactor()}let htmlContent={};if(table.settings.html){htmlContent=parseHtml(table.settings.html,table.settings.includeHiddenHtml,table.settings.useCss)||{}}table.settings.head=htmlContent.head||table.settings.head||[];table.settings.body=htmlContent.body||table.settings.body||[];table.settings.foot=htmlContent.foot||table.settings.foot||[];parseContent(table);table.minWidth=table.columns.reduce((total,col)=>total+col.minWidth,0);table.wrappedWidth=table.columns.reduce((total,col)=>total+col.wrappedWidth,0);if("number"===typeof table.settings.tableWidth){table.width=table.settings.tableWidth}else if("wrap"===table.settings.tableWidth){table.width=table.wrappedWidth}else{table.width=state().pageWidth()-table.margin("left")-table.margin("right")}return table}function parseUserArguments(args){if(1===args.length){return args[0]}else{const opts=args[2]||{};opts.body=args[1];opts.columns=args[0];opts.columns.forEach(col=>{if("object"===typeof col&&null==col.header){col.header=col.title}});return opts}}function parseContent(table){const settings=table.settings;table.columns=getTableColumns(settings);for(const sectionName of["head","body","foot"]){const rowSpansLeftForColumn={},sectionRows=settings[sectionName];if(0===sectionRows.length&&settings.columns&&"body"!==sectionName){const sectionRow=generateSectionRowFromColumnData(table,sectionName);if(sectionRow){sectionRows.push(sectionRow)}}sectionRows.forEach((rawRow,rowIndex)=>{let skippedRowForRowSpans=0;const row=new Row(rawRow,rowIndex,sectionName);table[sectionName].push(row);let colSpansAdded=0,columnSpansLeft=0;for(const column of table.columns){if(null==rowSpansLeftForColumn[column.index]||0===rowSpansLeftForColumn[column.index].left){if(0===columnSpansLeft){let rawCell;if(Array.isArray(rawRow)){rawCell=rawRow[column.index-colSpansAdded-skippedRowForRowSpans]}else{rawCell=rawRow[column.dataKey]}const styles=cellStyles(sectionName,column,rowIndex),cell=new Cell(rawCell,styles,sectionName);row.cells[column.dataKey]=cell;row.cells[column.index]=cell;columnSpansLeft=cell.colSpan-1;rowSpansLeftForColumn[column.index]={left:cell.rowSpan-1,times:columnSpansLeft}}else{columnSpansLeft--;colSpansAdded++}}else{rowSpansLeftForColumn[column.index].left--;columnSpansLeft=rowSpansLeftForColumn[column.index].times;skippedRowForRowSpans++}}})}table.allRows().forEach(row=>{for(const column of table.columns){const cell=row.cells[column.index];if(!cell){continue}table.callCellHooks(table.cellHooks.didParseCell,cell,row,column);cell.contentWidth=cell.padding("horizontal")+getStringWidth(cell.text,cell.styles);if("number"===typeof cell.styles.cellWidth){cell.minWidth=cell.styles.cellWidth;cell.wrappedWidth=cell.styles.cellWidth}else if("wrap"===cell.styles.cellWidth){cell.minWidth=cell.contentWidth;cell.wrappedWidth=cell.contentWidth}else{const defaultMinWidth=10/state().scaleFactor();cell.minWidth=cell.styles.minCellWidth||defaultMinWidth;cell.wrappedWidth=cell.contentWidth;if(cell.minWidth>cell.wrappedWidth){cell.wrappedWidth=cell.minWidth}}}});table.allRows().forEach(row=>{for(const column of table.columns){const cell=row.cells[column.index];if(cell&&1===cell.colSpan){if(cell.wrappedWidth>column.wrappedWidth){column.wrappedWidth=cell.wrappedWidth}if(cell.minWidth>column.minWidth){column.minWidth=cell.minWidth}}else{const columnStyles=table.styles.columnStyles[column.dataKey]||table.styles.columnStyles[column.index]||{},cellWidth=columnStyles.cellWidth;if(cellWidth&&"number"===typeof cellWidth){column.minWidth=cellWidth;column.wrappedWidth=cellWidth}}if(cell){if(1<cell.colSpan&&!column.minWidth){column.minWidth=cell.minWidth}if(1<cell.colSpan&&!column.wrappedWidth){column.wrappedWidth=cell.minWidth}table.callCellHooks(table.cellHooks.didParseCell,cell,row,column)}}})}function generateSectionRowFromColumnData(table,sectionName){const sectionRow={};table.columns.forEach(col=>{const columnData=col.raw;if("head"===sectionName){const val=columnData&&columnData.header?columnData.header:columnData;if(val){sectionRow[col.dataKey]=val}}else if("foot"===sectionName&&columnData.footer){sectionRow[col.dataKey]=columnData.footer}});return 0<Object.keys(sectionRow).length?sectionRow:null}function getTableColumns(settings){if(settings.columns){const cols=settings.columns.map((input,index)=>{const key=input.dataKey||input.key||index;return new Column(key,input,index)});return cols}else{const firstRow=settings.head[0]||settings.body[0]||settings.foot[0]||[],columns=[];Object.keys(firstRow).filter(key=>"_element"!==key).forEach(key=>{const colSpan=firstRow[key]&&firstRow[key].colSpan?firstRow[key].colSpan:1;for(let i=0;i<colSpan;i++){let id;if(Array.isArray(firstRow)){id=columns.length}else{id=key+(0<i?`_${i}`:"")}columns.push(new Column(id,id,columns.length))}});return columns}}function cellStyles(sectionName,column,rowIndex){const table=state().table,theme=getTheme(table.settings.theme),otherStyles=[theme.table,theme[sectionName],table.styles.styles,table.styles[`${sectionName}Styles`]],columnStyles=table.styles.columnStyles[column.dataKey]||table.styles.columnStyles[column.index]||{},colStyles="body"===sectionName?columnStyles:{},rowStyles="body"===sectionName&&0===rowIndex%2?assign({},theme.alternateRow,table.styles.alternateRowStyles):{};return assign(defaultStyles(),...[...otherStyles,rowStyles,colStyles])}