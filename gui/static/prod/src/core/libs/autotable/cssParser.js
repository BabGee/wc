import{marginOrPadding}from"./common.js";import state from"./state.js";export function parseCss(element,scaleFactor,ignored=[]){const result={},style=window.getComputedStyle(element);function assign(name,value,accepted=[]){if((0===accepted.length||-1!==accepted.indexOf(value))&&-1===ignored.indexOf(name)){if(0===value||value){result[name]=value}}}const pxScaleFactor=96/72;assign("fillColor",parseColor(element,"backgroundColor"));assign("fontStyle",parseFontStyle(style));assign("textColor",parseColor(element,"color"));assign("halign",style.textAlign,["left","right","center","justify"]);assign("valign",style.verticalAlign,["middle","bottom","top"]);assign("fontSize",parseInt(style.fontSize||"")/pxScaleFactor);assign("cellPadding",parsePadding(style.padding,style.fontSize,style.lineHeight,scaleFactor));assign("lineWidth",parseInt(style.borderTopWidth||"")/pxScaleFactor/scaleFactor);assign("lineColor",parseColor(element,"borderTopColor"));const font=(style.fontFamily||"").toLowerCase();if(state().doc.getFontList()[font]){assign("font",font)}return result}function parseFontStyle(style){let res="";if("bold"===style.fontWeight||"bolder"===style.fontWeight||700<=parseInt(style.fontWeight)){res+="bold"}if("italic"===style.fontStyle||"oblique"===style.fontStyle){res+="italic"}return res}function parseColor(element,colorProp){const cssColor=realColor(element,colorProp);if(!cssColor){return null}var rgba=cssColor.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d*\.?\d*))?\)$/);if(!rgba||!Array.isArray(rgba)){return null}var color=[parseInt(rgba[1]),parseInt(rgba[2]),parseInt(rgba[3])],alpha=parseInt(rgba[4]);if(0===alpha||isNaN(color[0])||isNaN(color[1])||isNaN(color[2])){return null}return color}function realColor(elem,colorProp){if(!elem){return null}var bg=window.getComputedStyle(elem)[colorProp];if("rgba(0, 0, 0, 0)"===bg||"transparent"===bg||"initial"===bg||"inherit"===bg){return realColor(elem.parentElement,colorProp)}else{return bg}}function parsePadding(val,fontSize,lineHeight,scaleFactor){if(!val){return null}const linePadding=(parseInt(lineHeight)-parseInt(fontSize))/scaleFactor/2;let padding=val.split(" ").map(n=>{return parseInt(n)/(96/(72/scaleFactor))});padding=marginOrPadding(padding,0);if(linePadding>padding.top){padding.top=linePadding}if(linePadding>padding.bottom){padding.bottom=linePadding}return padding}