import{ellipsize,applyStyles}from"./common.js";import state from"./state.js";export function calculateWidths(table){const columnMinWidth=10/state().scaleFactor();if(columnMinWidth*table.columns.length>table.width){console.error("Columns could not fit on page")}else if(table.minWidth>table.width){console.error("Column widths too wide and can't fit page")}const copy=table.columns.slice(0);distributeWidth(copy,table.width,table.wrappedWidth);applyColSpans(table);fitContent(table);applyRowSpans(table)}function applyRowSpans(table){const rowSpanCells={};let colRowSpansLeft=1;const all=table.allRows();for(let rowIndex=0;rowIndex<all.length;rowIndex++){const row=all[rowIndex];for(const column of table.columns){const data=rowSpanCells[column.index];if(1<colRowSpansLeft){colRowSpansLeft--;delete row.cells[column.index]}else if(data){data.cell.height+=row.height;if(data.cell.height>row.maxCellHeight){data.row.maxCellHeight=data.cell.height}colRowSpansLeft=data.cell.colSpan;delete row.cells[column.index];data.left--;if(1>=data.left){delete rowSpanCells[column.index]}}else{var cell=row.cells[column.index];if(!cell){continue}cell.height=row.height;if(1<cell.rowSpan){const remaining=all.length-rowIndex,left=cell.rowSpan>remaining?remaining:cell.rowSpan;rowSpanCells[column.index]={cell,left,row}}}}if("head"===row.section){table.headHeight+=row.maxCellHeight}if("foot"===row.section){table.footHeight+=row.maxCellHeight}table.height+=row.height}}function applyColSpans(table){const all=table.allRows();for(let rowIndex=0;rowIndex<all.length;rowIndex++){const row=all[rowIndex];let colSpanCell=null,combinedColSpanWidth=0,colSpansLeft=0;for(var columnIndex=0;columnIndex<table.columns.length;columnIndex++){const column=table.columns[columnIndex];let cell=null;colSpansLeft-=1;if(1<colSpansLeft&&table.columns[columnIndex+1]){combinedColSpanWidth+=column.width;delete row.cells[column.index];continue}else if(colSpanCell){cell=colSpanCell;delete row.cells[column.index];colSpanCell=null}else{cell=row.cells[column.index];if(!cell){continue}colSpansLeft=cell.colSpan;combinedColSpanWidth=0;if(1<cell.colSpan){colSpanCell=cell;combinedColSpanWidth+=column.width;continue}}cell.width=column.width+combinedColSpanWidth}}}function fitContent(table){let rowSpanHeight={count:0,height:0};for(const row of table.allRows()){for(const column of table.columns){const cell=row.cells[column.index];if(!cell){continue}applyStyles(cell.styles);const textSpace=cell.width-cell.padding("horizontal");if("linebreak"===cell.styles.overflow){cell.text=state().doc.splitTextToSize(cell.text,textSpace+1/(state().scaleFactor()||1),{fontSize:cell.styles.fontSize})}else if("ellipsize"===cell.styles.overflow){cell.text=ellipsize(cell.text,textSpace,cell.styles)}else if("hidden"===cell.styles.overflow){cell.text=ellipsize(cell.text,textSpace,cell.styles,"")}else if("function"===typeof cell.styles.overflow){cell.text=cell.styles.overflow(cell.text,textSpace)}cell.contentHeight=cell.getContentHeight();if(cell.styles.minCellHeight>cell.contentHeight){cell.contentHeight=cell.styles.minCellHeight}let realContentHeight=cell.contentHeight/cell.rowSpan;if(1<cell.rowSpan&&rowSpanHeight.count*rowSpanHeight.height<realContentHeight*cell.rowSpan){rowSpanHeight={height:realContentHeight,count:cell.rowSpan}}else if(rowSpanHeight&&0<rowSpanHeight.count){if(rowSpanHeight.height>realContentHeight){realContentHeight=rowSpanHeight.height}}if(realContentHeight>row.height){row.height=realContentHeight;row.maxCellHeight=realContentHeight}}rowSpanHeight.count--}}function distributeWidth(autoColumns,availableSpace,wrappedAutoColumnsWidth){const diffWidth=availableSpace-wrappedAutoColumnsWidth;for(let i=0;i<autoColumns.length;i++){const column=autoColumns[i],ratio=column.wrappedWidth/wrappedAutoColumnsWidth,suggestedWidth=column.wrappedWidth+diffWidth*ratio;let hasCustomWidth=!1;for(const row of state().table.allRows()){const cell=row.cells[column.index];if(cell&&"number"===typeof cell.styles.cellWidth){hasCustomWidth=!0;break}}if(suggestedWidth<column.minWidth||hasCustomWidth){column.width=column.minWidth+1/state().scaleFactor();wrappedAutoColumnsWidth-=column.wrappedWidth;availableSpace-=column.width;autoColumns.splice(i,1);distributeWidth(autoColumns,availableSpace,wrappedAutoColumnsWidth);break}column.width=suggestedWidth}}