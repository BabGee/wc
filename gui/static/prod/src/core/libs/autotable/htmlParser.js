import{parseCss}from"./cssParser.js";import state from"./state.js";export function parseHtml(input,includeHiddenHtml=!1,useCss=!1){let tableElement;if("string"===typeof input){tableElement=window.document.querySelector(input)}else{tableElement=input}if(!tableElement){console.error("Html table could not be found with input: ",input);return}const head=parseTableSection(window,tableElement.tHead,includeHiddenHtml,useCss);let body=[];for(var i=0;i<tableElement.tBodies.length;i++){body=body.concat(parseTableSection(window,tableElement.tBodies[i],includeHiddenHtml,useCss))}const foot=parseTableSection(window,tableElement.tFoot,includeHiddenHtml,useCss);return{head,body,foot}}function parseTableSection(window,sectionElement,includeHidden,useCss){const results=[];if(!sectionElement){return results}for(let i=0;i<sectionElement.rows.length;i++){const row=sectionElement.rows[i],resultRow=[],rowStyles=useCss?parseCss(row,state().scaleFactor(),["cellPadding","lineWidth","lineColor"]):{};for(let i=0;i<row.cells.length;i++){const cell=row.cells[i],style=window.getComputedStyle(cell);if(includeHidden||"none"!==style.display){const cellStyles=useCss?parseCss(cell,state().scaleFactor()):{};resultRow.push({rowSpan:cell.rowSpan,colSpan:cell.colSpan,styles:useCss?cellStyles:null,_element:cell,content:parseCellContent(cell)})}}if(0<resultRow.length&&(includeHidden||"none"!==rowStyles.display)){resultRow._element=row;results.push(resultRow)}}return results}function parseCellContent(orgCell){const cell=orgCell.cloneNode(!0);cell.innerHTML=cell.innerHTML.replace(/\n/g,"").replace(/ +/g," ");cell.innerHTML=cell.innerHTML.split("<br>").map(part=>part.trim()).join("\n");return cell.innerText||cell.textContent||""}