import{Redirect}from"./commands/redirect.js";import{GetSection}from"./commands/get-section.js";import{Command}from"./commands/command.js";import{GetGatewayDetails}from"./commands/get-gateway-details.js";import{GetInstitutionDetails}from"./commands/get-institution-details.js";import{GetInterface}from"./commands/get-interface.js";import{DataSource}from"./commands/data-source.js";import{Logger}from"../logger.js";export const STATUS_SUCCESS="00";export const STATUS_FAILED="96";export const COMMAND_REDIRECT="redirect";export const COMMAND_GET_SECTION="get_section";export const COMMAND_GET_INTERFACE="get_interface";export const COMMAND_GET_GATEWAY_DETAILS="get_gateway_details";export const COMMAND_GET_INSTITUTION_DETAILS="get_institution_details";export const COMMAND_DATA_SOURCE="data_source";export const COMMAND_VCS_MENU="vcs_menu";export const COMMAND_SESSION="session";export const COMMAND_WINDOW_EVENT="window_event";export const COMMAND_CLEAR_CART="clear_cart";export class Response{constructor(response){this.response=Response.loadJson(response);this.serviceCommands={}}get responseStatus(){return this.response.response_status}isSuccessful(){return this.responseStatus===STATUS_SUCCESS}get session(){return this.response.session_id}get host(){return this.response.gateway_host}static loadJson(payload){return"object"===typeof payload?payload:JSON.parse(payload)}stringify(){return JSON.stringify(this.response)}containsServiceCommand(serviceCommandName){return Object.keys(this.response.response).includes(serviceCommandName)}parse(serviceCommandName,config){const serviceCommandResponse=this.response.response[serviceCommandName];let command;switch(serviceCommandName){case COMMAND_REDIRECT:command=new Redirect(serviceCommandResponse,config);break;case COMMAND_GET_SECTION:command=new GetSection(serviceCommandResponse,config);break;case COMMAND_GET_INTERFACE:command=new GetInterface(serviceCommandResponse,config);break;case COMMAND_GET_GATEWAY_DETAILS:command=new GetGatewayDetails(serviceCommandResponse,config);break;case COMMAND_GET_INSTITUTION_DETAILS:command=new GetInstitutionDetails(serviceCommandResponse,config);break;case COMMAND_DATA_SOURCE:command=new DataSource(serviceCommandResponse,config);break;default:console.debug(`using default command Parser for ${serviceCommandName}`);command=new Command(serviceCommandResponse,config);}return command}parseAll(config){for(const serviceCommand in this.response.response){const commandResponse=this.parse(serviceCommand,config,!0);this.serviceCommands[serviceCommand]=commandResponse}if(this.containsServiceCommand(COMMAND_GET_SECTION)&&this.containsServiceCommand(COMMAND_GET_SECTION)){Logger.i.switchConfiguration("get_interface and get_section usage on the same service")}}summary(){let message;const lP=this.response.last_response;message="object"===typeof lP?JSON.stringify(lP):lP;return message}summaryTitle(){return!this.isSuccessful()?this.response.overall_status:"Response"}}