import{dataSourceMixin,utilsMixin,SerializableElement,scaleLinear,line,select,axisBottom,format$1 as format,axisLeft,json,max,mouse,event,css,html}from"../../../../../components/adaptive-ui.js";const MultilineChartBase=class extends utilsMixin(dataSourceMixin(SerializableElement)){static get is(){return"multiline-chart"}static get properties(){return{icon:String,dataName:{type:String,value:""},service:String,title:String,maxlength:Number,pattern:String,q:{type:String,value:""},dropdownValue:Object,rows:{value:[]},params:{type:Object,value:""},columnSize:{type:Array}}}initMultiline(){const margin={top:40,right:120,bottom:30,left:40},width=800-margin.left-margin.right,height=400-margin.top-margin.bottom,x=scaleLinear().domain([1910,2010]).range([0,width]),y=scaleLinear().domain([0,4e7]).range([height,0]),line$$1=line().x(d=>x(d.name)).y(d=>y(d.value)),chart=select("svg").append("g").attr("transform","translate("+margin.left+","+margin.top+")"),tooltip=select("#tooltip"),tooltipLine=chart.append("line"),xAxis=axisBottom(x).tickFormat(format(".4")),yAxis=axisLeft(y).tickFormat(format(".2s"));chart.append("g").call(yAxis);chart.append("g").attr("transform","translate(0,"+height+")").call(xAxis);chart.append("text").html("State Population Over Time").attr("x",200);let states,tipBox;json("data.json",function(error,data1){var data=data1[0].data,cols=data1[0].cols,rows=data1[0].rows;x.domain(rows.map(function(d){return d[1]}));y.domain([0,max(rows,function(d){return d[0]})]);chart.selectAll().data(states).enter().append("path").attr("fill","none").attr("stroke",d=>d.color).attr("stroke-width",2).datum(d=>d.history).attr("d",line$$1);chart.selectAll().data(states).enter().append("text").html(d=>d.name).attr("fill",d=>d.color).attr("alignment-baseline","middle").attr("x",width).attr("dx",".5em").attr("y",d=>y(d.currentvalue));tipBox=chart.append("rect").attr("width",width).attr("height",height).attr("opacity",0).on("mousemove",drawTooltip).on("mouseout",removeTooltip)});function removeTooltip(){if(tooltip)tooltip.style("display","none");if(tooltipLine)tooltipLine.attr("stroke","none")}function drawTooltip(){const name=10*Math.floor((x.invert(mouse(tipBox.node())[0])+5)/10);states.sort((a,b)=>{return b.history.find(h=>h.name==name).value-a.history.find(h=>h.name==name).value});tooltipLine.attr("stroke","black").attr("x1",x(name)).attr("x2",x(name)).attr("y1",0).attr("y2",height);tooltip.html(name).style("display","block").style("left",event.pageX+20).style("top",event.pageY-20).selectAll().data(states).enter().append("div").style("color",d=>d.color).html(d=>d.name+": "+d.history.find(h=>h.name==name)).value}}getValue(){const select$$1=this.shadowRoot.querySelector("#input");this.multilineValue=select$$1.value;return this.lineValue}getName(){const el=this.e.formName.split("=");return el[0]}validate(){if(this.e.required&&!this.getValue()){return!1}return!0}_dataJoined(data){const self=this;return data.filter(function(item,index){if(0===index||self.cols.length&&"href"===self.cols[index].type){return!1}return!0}).join(" ")}dscDataName(){return this.dataName}firstUpdated(changedProperties){super.firstUpdated(changedProperties);const self=this;this.loader.then(dsc=>{rows.dsc;self.initMultiline(dsc)})}_computeItemsCount(rows){return rows.length}_shouldFilter(items){var b=this._computeItemsCount(items);return 10<b}_computeItems(rows,q){const filtered_items=[];for(let i=0;i<rows.length;i++){const item=rows[i];if(q){var query=q.toLowerCase(),name=item[1].toLowerCase();if(-1!==name.indexOf(query)){filtered_items.push(item)}}else{filtered_items.push(item)}}return filtered_items}init(pElement,loader){super.init(pElement,loader);var self=this;self.required=pElement.min&&0<pElement.min;self.title=DropdownSelect.toTitleCase(pElement.name);self.icon=pElement.icon;self.service=pElement.service;self.params=self.pl.paramsCopy();self.dataName=pElement.defaultValue;self.dropdownValue=+pElement.kind;self.maxlength=pElement.max;self.loader=this.loadData()}};var multilineChart={MultilineChartBase:MultilineChartBase};const MultiLineChartStyles=css`
option{
    font-size: 18px;
    }
`;var multilineChartCss={MultiLineChartStyles:MultiLineChartStyles};class MultilineChart extends MultilineChartBase{static get styles(){return[MultiLineChartStyles,css`
      :host{
        display: block;
      }
      `]}constructor(){super()}renderDefault(){if(this.rows===void 0||this.q===void 0){return html``}return html`
   <div class="column">
 <div class="field" style="margin-top: 10px; margin-bottom: 10px;">
 <label class="form-label">${this.e.name}</label>
   <div class="select is-fullwidth">
  <select id="input" style="text-indent: 20px;padding: 0px; border-radius: 4px;">
    ${this._computeItems(this.rows,this.q).map(data=>html`<option value="${data[0]}">${this._dataJoined(data)}</option>`)}
  </select>
</div>
  </div>
  </div>`}}customElements.define(MultilineChart.is,MultilineChart);export{multilineChart as $multilineChart,multilineChartCss as $multilineChartCss,MultilineChartBase,MultiLineChartStyles};