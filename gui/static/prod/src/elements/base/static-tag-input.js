import{utilsMixin}from"../../core/mixins/utils-mixin.js";import{SerializableElement}from"../../core/serializable-element.js";export const StaticTagInputBase=class extends utilsMixin(SerializableElement){static get is(){return"static-tag-input"}static get properties(){return{title:{type:String,value:""},focused:{type:Boolean,value:!1},tags:{type:Array,value:[]},data:{type:Array}}}getName(){return this.e.formName}invalid(){}valid(){return!0}firstUpdated(changedProperties){super.firstUpdated(changedProperties);this}_tagsChanged(){console.log("tags changed")}_onFocus(){if(this.qs("#filter").focused){this.focused=!0}}_debug1(){const self=this;self.focused=!1}getValue(){if(!this.tags){return""}return this.tags.join(",")}validate(){if((this.e.required||this.required)&&!this.getValue()){return!1}return!0}_computeLabel(tagId,dataFromApi){if(tagId===void 0||dataFromApi===void 0){return}const tag=dataFromApi.filter(function(item){return item.id==tagId})[0];if(tag){return tag.name}}select(evt){const institutionItem=evt.currentTarget,itemId=institutionItem.getAttribute("id");this.add(institutionItem.dataName)}add(tag){if(null===this.tags){this.tags=[]}var tagIndex=this.tags.indexOf(tag);if(-1===tagIndex){this.push("tags",tag)}}remove(tag){if(null===this.tags){return}var tagIndex=this.tags.indexOf(tag);if(-1<tagIndex){this.tags.splice(tagIndex,1);this.qs("#suggestions").selectedValues=[]}}_onTagRemoveTapped(e){e.preventDefault();this.remove(e.currentTarget.tag)}filter(){this;this.data=[]}_onInput(){this.filter(this.$.filter.value)}init(pElement,loader){super.init(pElement,loader);var self=this;this.params={};this.params.data_name=pElement.defaultValue;self.title=StaticTagInputBase.toTitleCase(pElement.name);this.required=pElement.min&&0<pElement.min;self.data=JSON.parse(pElement.kind)||[];this.tags=[];const t=[];for(let i=0;i<self.data.length;i++){if(self.data[i].selected){t.push(self.data[i].id)}}this.tags=t}};