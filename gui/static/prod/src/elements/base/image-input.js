import{fileUploadMixin}from"../../core/mixins/fileupload-mixin.js";import{utilsMixin}from"../../core/mixins/utils-mixin.js";import{SerializableElement}from"../../core/serializable-element.js";import{Logger}from"../../core/logger.js";export const ImageInputBase=class extends utilsMixin(fileUploadMixin(SerializableElement)){static get is(){return"image-input"}static get properties(){return{icon:String,title:String,value:String,fileName:String,pattern:String,required:Boolean}}getName(){return this.e.formName}getValue(){return this.value}validate(){if(this.required&&!this.getValue()&&!this.e.defaultValue){return new this.Validation(!1,"this input is invalid")}return new this.Validation(!0,"this input is valid")}valid(){}invalid(){}firstUpdated(changedProperties){super.firstUpdated(changedProperties);if(this.e.defaultValue){this.updatePreview("/media/"+this.e.defaultValue)}}updateUploadMessage(){Logger.i.incompleteDev("image upload progress not displayed to user ")}updatePreview(){Logger.i.incompleteDev("image uploaded not previewed to user ")}uploadImage(fileInput){const self=this;var file=fileInput.files[0],imageType=/image.*/;if(!file){return}self.uploadTempFile(file,"image",imageType).then(upload=>{this.updateUploadMessage("Image successfully uploaded. Please Proceed!");self.value=upload.response;self.fileName=upload.name;this.updatePreview(upload.result)}).catch(reason=>{Logger.i.incompleteDev("Better error handling.",reason)})}resetUpload(){this.value="";this.fileName=""}init(pElement,loader){super.init(pElement,loader);var self=this;self.required=this.e.required||pElement.min&&0<pElement.min;self.icon=pElement.icon;self.title=ImageInputBase.toTitleCase(pElement.name);self.params=loader.pl.paramsCopy()}};