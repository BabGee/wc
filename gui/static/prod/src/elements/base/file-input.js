import{utilsMixin}from"../../core/mixins/utils-mixin.js";import{fileUploadMixin}from"../../core/mixins/fileupload-mixin.js";import{SerializableElement}from"../../core/serializable-element.js";import{Logger}from"../../core/logger.js";export const FileInputBase=class extends utilsMixin(fileUploadMixin(SerializableElement)){constructor(){super();this._validFileExtensions=[]}static get is(){return"file-input"}static get properties(){return{_validFileExtensions:Array,extensions:String,title:String,required:Boolean,value:String}}getValue(){return this.value}getName(){return this.e.formName}validate(){if(this.required&&!this.getValue()){return new this.Validation(!1,"invalid")}return new this.Validation(!0,"valid")}firstUpdated(changedProperties){super.firstUpdated(changedProperties)}_hasExtension(fileName,exts){return new RegExp("("+exts.join("|").replace(/\./g,"\\.")+")$").test(fileName)}updateUploadMessage(){Logger.i.incompleteDev("file upload not displayed to user ")}uploadFile(fileInput){var file=fileInput.files[0];const self=this;if(!file){return}if(self._validFileExtensions&&self._hasExtension(file.name,self._validFileExtensions)){this.uploadTempFile(file,"image",null).then(upload=>{this.value=upload.response;this.updateUploadMessage("File successfully uploaded. Please Proceed!")}).catch(reason=>{Logger.i.incompleteDev("Better error handling.",reason)})}else{this.updateUploadMessage("File type"+file.type+" not supported!")}}resetUpload(){this.value=""}init(pElement,loader){super.init(pElement,loader);var self=this;self.required=this.e.required||pElement.min&&0<pElement.min;self.icon=pElement.icon;self.title=FileInputBase.toTitleCase(pElement.name);this.value="";self.extensions=pElement.kind;if(self.extensions){this._validFileExtensions=this.extensions.split("|").map(function(li){return"."+li})}}};