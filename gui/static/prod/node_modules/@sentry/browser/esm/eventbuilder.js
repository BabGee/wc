import{addExceptionMechanism,addExceptionTypeValue,isDOMError,isDOMException,isError,isErrorEvent,isEvent,isPlainObject}from"../../utils/esm/index.js";import{eventFromPlainObject,eventFromStacktrace,prepareFramesForEvent}from"./parsers.js";import{computeStackTrace}from"./tracekit.js";export function eventFromUnknownInput(exception,syntheticException,options){if(void 0===options){options={}}var event;if(isErrorEvent(exception)&&exception.error){var errorEvent=exception;exception=errorEvent.error;event=eventFromStacktrace(computeStackTrace(exception));return event}if(isDOMError(exception)||isDOMException(exception)){var domException=exception,name_1=domException.name||(isDOMError(domException)?"DOMError":"DOMException"),message=domException.message?name_1+": "+domException.message:name_1;event=eventFromString(message,syntheticException,options);addExceptionTypeValue(event,message);return event}if(isError(exception)){event=eventFromStacktrace(computeStackTrace(exception));return event}if(isPlainObject(exception)||isEvent(exception)){var objectException=exception;event=eventFromPlainObject(objectException,syntheticException,options.rejection);addExceptionMechanism(event,{synthetic:!0});return event}event=eventFromString(exception,syntheticException,options);addExceptionTypeValue(event,""+exception,void 0);addExceptionMechanism(event,{synthetic:!0});return event}export function eventFromString(input,syntheticException,options){if(void 0===options){options={}}var event={message:input};if(options.attachStacktrace&&syntheticException){var stacktrace=computeStackTrace(syntheticException),frames_1=prepareFramesForEvent(stacktrace.stack);event.stacktrace={frames:frames_1}}return event}