"use strict";var precacheConfig=[],version="15",dist,db,cacheName="sw-precache-v3-4-"+(self.registration?self.registration.scope:"");function loadDist(){var objectStore=db.transaction("settings").objectStore("settings");objectStore.openCursor().onsuccess=function(event){var cursor=event.target.result;if(cursor){if("dist"===cursor.value.name){dist=cursor.value.value}cursor.continue()}else{console.log("All Settings loaded.")}}}function addData(k,v){var transaction=db.transaction(["settings"],"readwrite");transaction.oncomplete=function(){console.log("<li>Transaction completed: database modification finished.</li>")};transaction.onerror=function(){console.log("<li>Transaction not opened due to error: "+transaction.error+"</li>")};var objectStore=transaction.objectStore("settings");console.log(objectStore.indexNames);console.log(objectStore.keyPath);console.log(objectStore.name);console.log(objectStore.transaction);console.log(objectStore.autoIncrement);var objectStoreRequest=objectStore.add([{name:k,value:v}][0]);objectStoreRequest.onsuccess=function(){console.log("<li>Request successful.</li>")}}function openDb(){var DBOpenRequest=self.indexedDB.open("settings",1);DBOpenRequest.onerror=function(event){console.error("Error loading database.");console.log(event)};DBOpenRequest.onsuccess=function(){console.log("Database initialised.");db=DBOpenRequest.result;loadDist()};DBOpenRequest.onupgradeneeded=function(event){var db=event.target.result;db.onerror=function(){console.error("Error loading database.")};var objectStore=db.createObjectStore("settings",{keyPath:"name"});objectStore.createIndex("value","value",{unique:!1});console.log("Object store created.")}}var cleanResponse=function(originalResponse){if(!originalResponse.redirected){return Promise.resolve(originalResponse)}var bodyPromise="body"in originalResponse?Promise.resolve(originalResponse.body):originalResponse.blob();return bodyPromise.then(function(body){return new Response(body,{headers:originalResponse.headers,status:originalResponse.status,statusText:originalResponse.statusText})})},createCacheKey=function(originalUrl,paramName,paramValue,dontCacheBustUrlsMatching){var url=new URL(originalUrl);if(!dontCacheBustUrlsMatching||!url.pathname.match(dontCacheBustUrlsMatching)){url.search+=(url.search?"&":"")+encodeURIComponent(paramName)+"="+encodeURIComponent(paramValue)}return url.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(item){var relativeUrl=item[0],hash=item[1],absoluteUrl=new URL(relativeUrl,self.location),cacheKey=createCacheKey(absoluteUrl,hashParamName,hash,!1);return[absoluteUrl.toString(),cacheKey]})),createCacheKey2=function(originalUrl){return originalUrl+"?v="+version};function setOfCachedUrls(cache){return cache.keys().then(function(requests){return requests.map(function(request){return request.url})}).then(function(urls){return new Set(urls)})}self.addEventListener("install",function(event){console.log("service worker install");event.waitUntil(caches.open(cacheName).then(function(cache){return setOfCachedUrls(cache).then(function(cachedUrls){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(cacheKey){if(!cachedUrls.has(cacheKey)){var request=new Request(cacheKey,{credentials:"same-origin"});return fetch(request).then(function(response){if(!response.ok){throw new Error("Request for "+cacheKey+" returned a "+"response with status "+response.status)}return cleanResponse(response).then(function(responseToCache){return cache.put(cacheKey,responseToCache)})})}}))})}).then(function(){return self.skipWaiting()}))});var previousVersion=function(link){var url=new URL(link);const params=new URLSearchParams(url.search);return params.has("v")&&params.get("v")!==version};self.addEventListener("activate",function(event){console.log("service worker activate");new Set(urlsToCacheKeys.values());event.waitUntil(caches.open(cacheName).then(function(cache){return cache.keys().then(function(existingRequests){return Promise.all(existingRequests.map(function(existingRequest){console.log(existingRequest);if(previousVersion(existingRequest.url)){return cache.delete(existingRequest)}}))})}).then(function(){return openDb()}).then(function(){return self.clients.claim()}))});self.addEventListener("fetch",function(event){console.log("service worker fetch");if("GET"===event.request.method){const urla=event.request.url,pathName=new URL(urla).pathname,pathParts=pathName.split("/");if(3<=pathParts.length&&"admin"===pathParts[1]){return}var notEmptyPaths=pathParts.filter(function(p){return p.length});if(!notEmptyPaths.length||(notEmptyPaths.length="index"===notEmptyPaths[0]||"home"===notEmptyPaths[0])){openDb()}if(1<pathParts.length&&"prod"===pathParts[2]){var url=event.request.url,newRequest=event.request,newURL=url;console.log(dist);if("dev"===dist){newURL=url.replace("prod","dev");newRequest=new Request(newURL)}var cacheKey=createCacheKey2(newURL);event.respondWith(caches.match(cacheKey).then(response=>{if(response){return response}return fetch(newRequest,event.request).then(response=>{return caches.open(cacheName).then(cache=>{cache.put(cacheKey,response.clone());return response})}).catch(error=>{console.log("service worker error");console.log(error)})}))}}else if("POST"===event.request.method){}});
